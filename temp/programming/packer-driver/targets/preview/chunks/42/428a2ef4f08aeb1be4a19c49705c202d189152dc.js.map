{"version":3,"sources":["file:///F:/Lap%20Trinh%20Game/simple-games/assets/lobby/scripts/LobbyManager.ts"],"names":["_decorator","Component","Prefab","instantiate","Vec3","Quat","tween","systemEvent","SystemEvent","CameraComponent","geometry","PhysicsSystem","loader","JsonAsset","ModelComponent","Texture2D","director","find","ccclass","property","Ray","tempQuat_a","Lobby","type","coverWidth","_coverList","_coverData","_curIndex","_isLoading","start","persistCanvas","active","loadCovers","on","EventType","MOUSE_UP","onMouseUp","TOUCH_END","onTouchEnd","loadRes","err","jsonObj","Array","isArray","json","generateCovers","coverData","coverNum","Math","max","length","i","coverNode","coverPrfb","name","parent","node","data","modelComp","getComponent","mat","material","coverImgUrl","texture","console","error","setProperty","tweenToIndex","push","index","immediate","pos","rot","delta","diff","abs","sign","posX","angle","set","fromAxisAngle","UNIT_Y","PI","setWorldPosition","setWorldRotation","to","position","rotation","onComplete","moveRight","moveLeft","onClickPos","mousePos","outRay","mainCamera","screenPointToRay","x","y","instance","raycastClosest","raycastClosestResult","collider","Number","parseInt","sceneUrl","loadScene","event","getLocation","touch","onDestroy","off"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Prefab, instantiate, Vec3, Quat, tween, EventTouch, \r\n    systemEvent, SystemEvent, EventMouse, CameraComponent, geometry, PhysicsSystem, loader, JsonAsset, ModelComponent, Texture2D, js, director, Vec2, game, find } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\nconst { Ray } = geometry;\r\nconst tempQuat_a: Quat = new Quat();\r\n\r\ninterface ICoverData {\r\n    name: string;\r\n    coverImgUrl: string;\r\n    sceneUrl: string;\r\n}\r\n\r\n@ccclass('Lobby')\r\nexport class Lobby extends Component {\r\n    @property({type: Prefab})\r\n    public coverPrfb: Prefab = null;\r\n    @property({type: CameraComponent})\r\n    public mainCamera: CameraComponent = null;\r\n\r\n    private coverWidth: number = 1;\r\n    private _coverList: Node[] = [];\r\n    private _coverData: ICoverData[] = [];\r\n    private _curIndex = 0;\r\n    private _isLoading = false;\r\n    start () {\r\n        const persistCanvas = find('PersistCanvas')\r\n        persistCanvas.active = false;\r\n\r\n        // Your initialization goes here.\r\n        this.loadCovers();\r\n        //this.tweenToIndex(this._curIndex, true);\r\n\r\n\r\n        //鼠标监听\r\n        systemEvent.on(SystemEvent.EventType.MOUSE_UP, this.onMouseUp, this);\r\n        \r\n        //触摸监听\r\n        systemEvent.on(SystemEvent.EventType.TOUCH_END, this.onTouchEnd, this);\r\n    }\r\n\r\n    loadCovers() {\r\n        loader.loadRes('games.json', JsonAsset, (err, jsonObj) => {\r\n            if (Array.isArray(jsonObj.json)) {\r\n                this.generateCovers(jsonObj.json);\r\n            }\r\n        });\r\n    }\r\n\r\n    generateCovers(coverData:ICoverData[]) {\r\n\r\n        this._coverData = coverData;\r\n        const coverNum = Math.max(coverData.length, 5); // 为了好看，默认至少五个\r\n        for (let i = 0; i < coverNum; i++) {\r\n            \r\n            const coverNode: Node = instantiate(this.coverPrfb);\r\n            coverNode.name = ''+i;\r\n            coverNode.parent = this.node;\r\n\r\n            if (i < coverData.length) {\r\n                const data = coverData[i];\r\n\r\n                const modelComp = coverNode.getComponent(ModelComponent);\r\n                const mat = modelComp.material;\r\n                loader.loadRes(data.coverImgUrl, Texture2D, (err, texture: Texture2D) => {\r\n                    if (err) {\r\n                        console.error(err);\r\n                        return;\r\n                    }\r\n                    mat.setProperty('mainTexture', texture);\r\n                    if (i === coverData.length - 1) {\r\n                        this.tweenToIndex(this._curIndex, true);\r\n                    }\r\n                })\r\n            }\r\n\r\n            this._coverList.push(coverNode);\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    tweenToIndex(index: number, immediate: boolean = false) {\r\n        if (index < 0 || index >= this._coverList.length) {\r\n            return;\r\n        }\r\n\r\n        this._curIndex = index;\r\n\r\n        for(let i = 0; i < this._coverList.length; i++) {\r\n            const coverNode = this._coverList[i];\r\n            const pos = new Vec3();\r\n            const rot: Quat = new Quat();\r\n            if (i !== this._curIndex) {\r\n                const delta = (i - this._curIndex) * this.coverWidth;\r\n                let diff = (1 - (Math.abs(delta) + 2) * 0.1);\r\n                if (diff < 0.1) {\r\n                    diff = 0.1;\r\n                }\r\n                const sign = Math.sign(delta);\r\n                let posX = delta * diff;\r\n                let angle = -60 * sign;\r\n                pos.set(posX, 0, 0);\r\n                Quat.fromAxisAngle(rot, Vec3.UNIT_Y, angle/180 * Math.PI)\r\n            }\r\n\r\n            if (immediate) {       \r\n                coverNode.setWorldPosition(pos);\r\n                coverNode.setWorldRotation(rot);\r\n            } else {\r\n                tween(coverNode)\r\n                .to(0.5, {position: pos, rotation: rot}, {onComplete: ()=> {\r\n    \r\n                }})\r\n                .start();\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    moveRight() {\r\n        if (this._curIndex + 1 < this._coverList.length) {\r\n            this.tweenToIndex(this._curIndex + 1);\r\n        }\r\n    }\r\n\r\n    moveLeft() {\r\n        if (this._curIndex - 1 >= 0) {\r\n            this.tweenToIndex(this._curIndex - 1);\r\n        }\r\n    }\r\n\r\n    onClickPos(mousePos: Vec2) {\r\n        const outRay = new Ray();\r\n        this.mainCamera.screenPointToRay(mousePos.x, mousePos.y, outRay);\r\n        PhysicsSystem.instance.raycastClosest(outRay);\r\n        if (PhysicsSystem.instance.raycastClosestResult.collider &&\r\n            PhysicsSystem.instance.raycastClosestResult.collider.node) {\r\n            const node = PhysicsSystem.instance.raycastClosestResult.collider.node;\r\n            const index = Number.parseInt(node.name);\r\n    \r\n            if (index < this._coverData.length) {\r\n                if (this._isLoading) {\r\n                    return;\r\n                }\r\n\r\n                this._isLoading = true;\r\n                const sceneUrl = this._coverData[index].sceneUrl;\r\n                if (director.loadScene(sceneUrl)) {\r\n                    const persistCanvas = find('PersistCanvas')\r\n                    persistCanvas.active = true;\r\n                    this._isLoading = false;\r\n                } else {\r\n                    this._isLoading = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    onMouseUp(event: EventMouse) {\r\n        this.onClickPos(event.getLocation());\r\n    }\r\n\r\n    onTouchEnd(touch: Touch, event: EventTouch) {\r\n        this.onClickPos(event.getLocation());\r\n    }\r\n\r\n    onDestroy() {\r\n        //鼠标监听\r\n        systemEvent.off(SystemEvent.EventType.MOUSE_UP, this.onMouseUp, this);\r\n\r\n        //触摸监听\r\n        systemEvent.off(SystemEvent.EventType.TOUCH_END, this.onTouchEnd, this);\r\n    }\r\n\r\n    // update (deltaTime: number) {\r\n    //     // Your update function goes here.\r\n    // }\r\n}\r\n"]}